<html>
<head>
<title>THDL Dictionary</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<%= stylesheet_link_tag 'stgall' %>
<%= stylesheet_link_tag 'thdl-styles' %>
<%= stylesheet_link_tag 'menu' %>

<%#= define_javascript_functions %>
<%#= javascript_include_tag "prototype" %>
<%#= javascript_include_tag "effects" %>
<%= javascript_include_tag :defaults %> 
<%#= javascript_include_tag "in_place_form_editor" %> 
<%= javascript_include_tag "in_place_select_editor" %> 
<%= javascript_include_tag 'menu', 'menu_items', 'menu_tpl' %> 

<script language="JavaScript" type="text/JavaScript">
<!--

function Hash()
{
	this.length = 0;
	this.items = new Array();
	for (var i = 0; i < arguments.length; i += 2) {
		if (typeof(arguments[i + 1]) != 'undefined') {
			this.items[arguments[i]] = arguments[i + 1];
			this.length++;
		}
	}
   
	this.removeItem = function(in_key)
	{
		var tmp_value;
		if (typeof(this.items[in_key]) != 'undefined') {
			this.length--;
			var tmp_value = this.items[in_key];
			delete this.items[in_key];
		}
	   
		return tmp_value;
	}

	this.getItem = function(in_key) {
		return this.items[in_key];
	}

	this.setItem = function(in_key, in_value)
	{
		if (typeof(in_value) != 'undefined') {
			if (typeof(this.items[in_key]) == 'undefined') {
				this.length++;
			}

			this.items[in_key] = in_value;
		}
	   
		return in_value;
	}

	this.hasItem = function(in_key)
	{
		return typeof(this.items[in_key]) != 'undefined';
	}
}

var open_windows=new Array();

open_windows['definition_definition_form'] = new Hash();
//open_windows['internal_definition_definition_form'] = new Hash();
open_windows['definition'] = new Hash();
open_windows['internal_definition'] = new Hash();
open_windows['etymology'] = new Hash();
//open_windows['internal_etymology'] = new Hash();
open_windows['full_synonym'] = new Hash();
//open_windows['internal_full_synonym'] = new Hash();
open_windows['group'] = new Hash();
//open_windows['internal_group'] = new Hash();
open_windows['literary_quotation'] = new Hash();
//open_windows['internal_literary_quotation'] = new Hash();
open_windows['meta'] = new Hash();
//open_windows['internal_meta'] = new Hash();
open_windows['model_sentence'] = new Hash();
//open_windows['internal_model_sentence'] = new Hash();
open_windows['oral_quotation'] = new Hash();
//open_windows['internal_oral_quotation'] = new Hash();
open_windows['pronunciation'] = new Hash();
//open_windows['internal_pronunciation'] = new Hash();
open_windows['spelling'] = new Hash();
//open_windows['internal_spelling'] = new Hash();
open_windows['translation_equivalent'] = new Hash();
//open_windows['internal_translation_equivalent'] = new Hash();
open_windows['translation'] = new Hash();
//open_windows['internal_translation'] = new Hash();
open_windows['etymology_type'] = new Hash();
open_windows['pronunciation_type'] = new Hash();
open_windows['language_context'] = new Hash();
open_windows['script'] = new Hash();
open_windows['literary_genre'] = new Hash();
open_windows['literary_form'] = new Hash();
open_windows['grammar_function_level_one'] = new Hash();
open_windows['grammar_function_level_two'] = new Hash();
open_windows['grammar_function_level_three'] = new Hash();
open_windows['literary_period'] = new Hash();
open_windows['major_dialect'] = new Hash();
open_windows['specific_dialect'] = new Hash();
open_windows['model_sentence_type'] = new Hash();
open_windows['spelling_major_dialect'] = new Hash();
open_windows['spelling_specific_dialect'] = new Hash();
open_windows['theme_level_two'] = new Hash();
open_windows['theme_level_one'] = new Hash();
open_windows['theme_level_three'] = new Hash();
open_windows['thematic_classification'] = new Hash();
open_windows['term_type'] = new Hash();
open_windows['register'] = new Hash();
open_windows['language'] = new Hash();
open_windows['loan_language'] = new Hash();
open_windows['source_type'] = new Hash();
open_windows['project'] = new Hash();

function check_windows(table) {
	if (open_windows[table].length > 0)  {
		alert('You have unsaved changes.')
		return false;		
	}
	else
		return true;
}


function MM_openNewWindow(theURL,winName,features) { //v2.0
  window.open(theURL,winName,features);
}
function MM_findObj(n, d) { //v4.01
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && d.getElementById) x=d.getElementById(n); return x;
}
function MM_swapImage() { //v3.0
  var i,j=0,x,a=MM_swapImage.arguments; document.MM_sr=new Array; for(i=0;i<(a.length-2);i+=3)
   if ((x=MM_findObj(a[i]))!=null){document.MM_sr[j++]=x; if(!x.oSrc) x.oSrc=x.src; x.src=a[i+2];}
}
function MM_swapImgRestore() { //v3.0
  var i,x,a=document.MM_sr; for(i=0;a&&i<a.length&&(x=a[i])&&x.oSrc;i++) x.src=x.oSrc;
}

function MM_preloadImages() { //v3.0
 var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
   var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
   if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function getCoord(e) { if( !e ) { e = window.event; } if( !e || ( typeof( e.pageX ) != 'number' && typeof( e.clientX ) != 'number' ) ) { return window.alert('Your browser did not pass the required information about the event'); }
	if( typeof( e.pageX ) == 'number' ) { var xcoord = e.pageX; var ycoord = e.pageY; } else {
		var xcoord = e.clientX; var ycoord = e.clientY;
		if( !( ( window.navigator.userAgent.indexOf( 'Opera' ) + 1 ) || ( window.ScriptEngine && ScriptEngine().indexOf( 'InScript' ) + 1 && !document.createElement ) || window.navigator.vendor == 'KDE' ) ) {
			if( document.documentElement && ( document.documentElement.scrollTop || document.documentElement.scrollLeft ) ) {
				xcoord += document.documentElement.scrollLeft; ycoord += document.documentElement.scrollTop;
			} else if( document.body && ( document.body.scrollTop || document.body.scrollLeft ) ) {
				xcoord += document.body.scrollLeft; ycoord += document.body.scrollTop;
			}
		}
	}
	return [xcoord,ycoord];
}

//-->
 </script>
</head>
<body bgcolor="#336699" text="#000000" link="#B77C39" vlink="#999966" alink="#000099" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="90%" border="0" align="center" cellpadding="5" cellspacing="0" bgcolor="#999966">
  <tr bgcolor="#999966">     <td bgcolor="#0033ff"><font color="#ffffff" size="+3"><strong><em>THDL Dictionary
    </em></strong></font><font color="#3E1B05" size="+2"><em></em></font></td>
</tr>
<td bgcolor="#000000"></td>
<tr bgcolor="#e6e6e6">
	<td>
		<%= form_tag({:action => "menu_action"}, :name => "header") %>
 	  <select name="table_name">
<option>Select One</option>
		<option <% if session[:dbtable] == "definitions" %>selected<% end %> value="definitions">Definition</option>
		<option <% if session[:dbtable] == "translations" %>selected<% end %> value="translations">Translation</option>
		<option <% if session[:dbtable] == "etymologies" %>selected<% end %> value="etymologies">Etymology</option>
		<option <% if session[:dbtable] == "spellings" %>selected<% end %> value="spellings">Spelling</option>
		<option <% if session[:dbtable] == "literary_quotations" %>selected<% end %> value="literary_quotations">Literary Quotations</option>
		<option <% if session[:dbtable] == "pronunciations" %>selected<% end %> value="pronunciations">Pronunciation</option>
		<option <% if session[:dbtable] == "translation_equivalents" %>selected<% end %> value="translation_equivalents">Translation Equivalent</option>
		<option <% if session[:dbtable] == "full_synonyms" %>selected<% end %> value="full_synonyms">Full Synonyms</option>
		<option <% if session[:dbtable] == "oral_quotations" %>selected<% end %> value="oral_quotations">Oral Quotations</option>
		<option <% if session[:dbtable] == "groups" %>selected<% end %> value="groups">Group</option>
		<option <% if session[:dbtable] == "model_sentences" %>selected<% end %> value="model_sentences">Model Sentence</option>
		<option <% if session[:dbtable] == "languages" %>selected<% end %> value="languages">Language</option>
		<option <% if session[:dbtable] == "loan_languages" %>selected<% end %> value="loan_languages">Loan Language</option>
		<option <% if session[:dbtable] == "theme_level_ones" %>selected<% end %> value="theme_level_ones">Thematic classification</option>
		<option <% if session[:dbtable] == "grammar_function_level_ones" %>selected<% end %> value="grammar_function_level_ones">Grammactical Function</option>
		<option <% if session[:dbtable] == "registers" %>selected<% end %> value="registers">Register</option>
		<option <% if session[:dbtable] == "major_dialects" %>selected<% end %> value="major_dialects">Dialects</option>
		<option <% if session[:dbtable] == "projects" %>selected<% end %> value="projects">Project</option>
		<option <% if session[:dbtable] == "source_types" %>selected<% end %> value="source_types">Source type</option>
		<option <% if session[:dbtable] == "derivations" %>selected<% end %> value="derivations">Derivation</option>
		<option <% if session[:dbtable] == "literary_periods" %>selected<% end %> value="literary_periods">Literary Period</option>
		<option <% if session[:dbtable] == "literary_forms" %>selected<% end %> value="literary_forms">Literary Form</option>
		<option <% if session[:dbtable] == "literary_genres" %>selected<% end %> value="literary_genres">Literary Genre</option>
		<option <% if session[:dbtable] == "language_contexts" %>selected<% end %> value="language_contexts">Language Contexts</option>
		<option <% if session[:dbtable] == "etymology_types" %>selected<% end %> value="etymology_types">Etymology types</option>
		<option <% if session[:dbtable] == "pronunciation_types" %>selected<% end %> value="pronunciation_types">Pronunciation types</option>
		<option <% if session[:dbtable] == "scripts" %>selected<% end %> value="scripts">Scripts</option>
		
		</select>
		<input type="hidden" name="type" value="" >
		<!--<input alt="Search" type="image" name="type" src="search.gif" value="search">
		<input alt="List" type="image" name="type" src="list.gif" value="list">
		<input alt="New" type="image" name="type" src="new.gif" value="new">-->
				<SCRIPT language="javascript">document.header.mode="";</SCRIPT> 
				<%= link_to_function(image_tag("list_up.gif", :size => "87x19", :border => 0, :alt => "List", :name => "list"), "if(document.forms[0].table_name.value != 'Select One') {if(document.header.mode==\"edit\") { if (confirm(\"Abandon any changes?\")) {document.header.type.value=\"list\";document.header.submit();}} else {document.header.type.value=\"list\";document.header.submit();}}", {:onMouseOut => "MM_swapImgRestore();", :onMouseOver => "MM_swapImage('list','','/images/list_down.gif',1);"}) %> 
				<%= link_to_function(image_tag("new_up.gif", :size => "87x19", :border => 0, :alt => "New", :name => "new"), "if(document.forms[0].table_name.value != 'Select One') {if(document.header.mode==\"edit\") { if (confirm(\"Abandon any changes?\")) {document.header.type.value=\"new\";document.forms['0'].submit();}} else {document.header.type.value=\"new\";document.forms['0'].submit();}}", {:onMouseOut => "MM_swapImgRestore();", :onMouseOver => "MM_swapImage('new','','/images/new_down.gif',1);"}) %> 
				<%= link_to_function(image_tag("search_up.gif", :size => "87x19", :border => 0, :alt => "Search", :name => "search"), "if(document.forms[0].table_name.value != 'Select One') {if(document.header.mode==\"edit\") { if (confirm(\"Abandon any changes?\")) {document.header.type.value=\"search\";document.forms['0'].submit();}} else {document.header.type.value=\"search\";document.forms['0'].submit();}}", {:onMouseOut => "MM_swapImgRestore();", :onMouseOver => "MM_swapImage('search','','/images/search_down.gif',1);"}) %> 
		<%= link_to_function(image_tag("home_up.gif", :size => "87x19", :border => 0, :alt => "Home", :name => "home"), "if(document.header.mode==\"edit\") { if (confirm(\"Abandon any changes?\")) {document.header.type.value=\"home\";document.forms['0'].submit();}} else {document.header.type.value=\"home\";document.forms['0'].submit();}", {:onMouseOut => "MM_swapImgRestore();", :onMouseOver => "MM_swapImage('home','','/images/home_down.gif',1);"}) %>
				</form>
	</td>
</tr> 
  <tr>   <tr bgcolor="#FFFFFF">     <td valign="top" bgcolor="#FFFFFF"> 
  <blockquote>
<div id='content' class="tib1">
<%= @content_for_layout %>
</div>
    </blockquote>
      <center>
<!--<a href="/images/search">Find Images</a> | <a href="/keywords/search">Find Keywords</a> | <a href="/sachens/search">Find Sachen</a> 
<br >
<a href="/literatures/search">Find Literature</a> | <a href="/plan_components/search">Find Plan Components</a> | <a href="/related_objects/search">Find Related Objects</a> | <a href="/plan_areas/search">Find Plan Areas</a>-->
 </center>
    
          <p><center>
          </center>
    </p>    </td>

  </tr>

  <tr valign="baseline">     <td bgcolor="#3E1B05"> </tr>
</table>
</body>
</html>           
