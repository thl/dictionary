# ComplexScripts
begin
  lang_table_exists = ComplexLanguage.table_exists?
rescue
  lang_table_exists = false
end
if lang_table_exists
  # Populate from db if table exists. Using the language model generated by "script/generate complex_script_languages"
  LANGUAGES = Language.languages_hash
else
  # Populate with pre-defined values. Feel free to change according to your application's needs. Main key is language code
  # in ISO 369-2. Locale is code in ISO 369-3. Unicode range is the inclusive lower and upper limits for the unicode characters
  # for the script the language.
  LANGUAGES = {'en' => {:locale => 'eng-US', :title => 'English'}, 'ne' => {:locale => 'nep-NP', :title => 'Nepali', :unicode_range => [2304, 2431]}, 'bo' => {:title => 'Tibetan', :locale => 'bod-CN', :unicode_range => [3840, 4095]}}
end
UNICODE_RANGES = Array.new
LANGUAGES.each do |key, value|
  range =  value[:unicode_range]
  UNICODE_RANGES << [range[0], range[1], key] if !range.nil?
end
UNICODE_RANGES = UNICODE_RANGES.freeze

module ComplexScripts
  def ComplexScripts.character_within_unicode_range(ch)
    UNICODE_RANGES.each_with_index { |range, i| return i if ch>=range[0] && ch<=range[1] }
    return nil
  end  
end